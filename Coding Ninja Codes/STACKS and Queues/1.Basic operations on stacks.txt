#include<climits>
// #include<iostream>
// using namespace std;
class StackUsingArray{
    int *data;  //will dynamically allocate it: int *data=new int[10];
    int nextIndex;
    int capacity;

    public:

    StackUsingArray(int totalSize){
        // data=new int[totalSize];
        data= new int[4];
        nextIndex=0;
        capacity=totalSize;
    }

    //return the number of elements present in my stack
    int size(){
        return nextIndex;
    }

    bool isEmpty(){
        /*
        if(nextIndex==0){
            return true;
        }
        else{
            return false;
        }
        */

       return nextIndex==0;//shortcut
    }

    //insert element
    void push(int element){
        // if(nextIndex==capacity){
        //     cout<<"Stack full"<<endl;
        //     return;
        // }

        if(nextIndex==capacity){
            int *newData=new int[2* capacity];  //creating stack of double size
            for(int i=0;i<capacity;i++){    //copying elements
                newData[i]=data[i];
            }
            capacity*=2;
            delete[] data;
            data=newData;

        }
        data[nextIndex]=element;
        nextIndex++;
    }

    //delete element
    int pop(){
        if(isEmpty()){
            cout<<"Stack is Empty!"<<endl;
            return INT_MIN;
        }
        nextIndex--;
        return data[nextIndex];
    }

    int top(){
        if(isEmpty()){
            cout<<"Stack is Empty"<<endl;
            return INT_MIN;
        }
        return data[nextIndex-1];
    }
};

// int main(){
//     StackUsingArray s(4);
//     s.push(10);
//     // s.push(20);
//     cout<<s.pop();
// }
