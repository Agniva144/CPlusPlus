#include<iostream>
using namespace std;

template <typename T>
class Node{
	public:
	T data;
	Node<T> *next;

	Node(T data){
		this->data=data;
		next=NULL;
	}
};

template<typename T>
class Queue_LL{
	Node<T> *head;
	Node<T> *tail;
	int size;

	public:
	Queue_LL(){
		head=NULL;
		tail=NULL;
		size=0;
	}

	int getSize(){
		return size;
	}

	bool isEmpty(){
		return size==0;
	}

	void Enqueue(T element){

		Node<T> *newNode=new Node<T>(element);
		
		if(isEmpty() /*head==NULL*/){	//empty initially
			head=newNode;
			tail=newNode;
		}
		else{
			tail->next=newNode;
			tail=newNode;
		}
		size++;

	}

	T front(){
		if(isEmpty()){
			return 0;
		}
		return head->data;
	}

	T dequeue(){
		if(isEmpty()){
			return 0;
		}
		T ans=head->data;	//storing the answer to return
		Node<T> *temp=head;
		head=head->next;
		delete temp;
		size--;

		return ans;

	}
};

int main(){
	
	Queue_LL<int> q;

	q.Enqueue(10);
	q.Enqueue(20);
	q.Enqueue(30);
	q.Enqueue(40);
	q.Enqueue(50);
	q.Enqueue(60);

	cout<<q.front()<<endl;
	cout<<q.dequeue()<<endl;
	cout<<q.dequeue()<<endl;
	cout<<q.dequeue()<<endl;

	cout<<q.getSize()<<endl;
	cout<<q.isEmpty()<<endl;

}