#include<climits>
#include<iostream>
using namespace std;

template <typename T>
class StackUsingArray{
    T *data;  //will dynamically allocate it: int *data=new int[10];
    int nextIndex;
    int capacity;

    public:

    StackUsingArray(int totalSize){
        // data=new int[totalSize];
        data= new T[4];
        nextIndex=0;
        capacity=totalSize;
    }

    //return the number of elements present in my stack
    int size(){
        return nextIndex;
    }

    bool isEmpty(){
        /*
        if(nextIndex==0){
            return true;
        }
        else{
            return false;
        }
        */

       return nextIndex==0;//shortcut
    }

    //insert element
    void push(T element){
        // if(nextIndex==capacity){
        //     cout<<"Stack full"<<endl;
        //     return;
        // }

        if(nextIndex==capacity){
            T *newData=new T[2* capacity];  //creating stack of double size
            for(int i=0;i<capacity;i++){    //copying elements
                newData[i]=data[i];
            }
            capacity*=2;
            delete[] data;
            data=newData;

        }
        data[nextIndex]=element;
        nextIndex++;
    }

    //delete element
    T pop(){
        if(isEmpty()){
            cout<<"Stack is Empty!"<<endl;
            return 0;
        }
        nextIndex--;
        return data[nextIndex];
    }

    T top(){
        if(isEmpty()){
            cout<<"Stack is Empty"<<endl;
            return 0;
        }
        return data[nextIndex-1];
    }
};

int main(){
    //int type
    // StackUsingArray<int> s(4);
    // s.push(10);
    // s.push(20);
    // cout<<s.pop();

    //char type
    StackUsingArray<char> s(4);
    s.push(100);
    s.push(101);
    s.push(102);
    cout<<s.pop();

}
