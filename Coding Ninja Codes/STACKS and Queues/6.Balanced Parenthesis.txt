// CPP program to check for balanced brackets.
#include <bits/stdc++.h>
using namespace std;

// function to check if brackets are balanced
bool areBracketsBalanced(string expr)
{
	stack<char> temp;
    int cnt=0;  // main purpose of cnt is to keep count that at the end for balanced parenthesis cnt should return back to zero , but for any other cases it isn't , special case for no opening bracket but a closing bracket!
		for(int i=0;i<expr.length();i++)
		{   
            
			if(temp.empty())
			{   
                if(expr[i]=='(' || expr[i]=='{' || expr[i]=='['){
                    cout<<endl<<"Pushing the first element "<<expr[i]<<endl;
				    temp.push(expr[i]);
                    cnt++;
                }
			}
			else if((temp.top()=='('&& expr[i]==')') || (temp.top()=='{' && expr[i]=='}') || (temp.top()=='[' && expr[i]==']'))
			{
                cout<<endl<<"Pop "<<expr[i]<<endl;
				temp.pop();
                cnt--;
			}
			else if(expr[i]=='(' || expr[i]=='{' || expr[i]=='[')
			{
                cout<<endl<<"pushing specific elements "<<expr[i]<<endl;
				temp.push(expr[i]);
                cnt++;
            }
            else if(expr[i]==')' || expr[i]=='}' || expr[i]==']'){
                cnt--;
            }
		}
		if(temp.empty() && cnt==0)
		{
			return true;
		}
        return false;
        
}

// Driver code
int main()
{
	string expr = "{a+bC=[]";

	// Function call
	if (areBracketsBalanced(expr))
		cout << "Balanced";
	else
		cout << "Not Balanced";
	return 0;
}
