#include<iostream>
#include<queue>
#include "BinaryTreeNode.h"
using namespace std;

void printTree(BinaryTreeNode<int>* root){

    //base case
    if(root==NULL){
        return;
    }

    cout<<root->data<<":";
    if(root->left!=NULL){
        cout<<"L->"<<root->left->data;

    }
    if(root->right!=NULL){
        cout<<",R->"<<root->right->data;
    }
    cout<<endl;

    printTree(root->left);
    printTree(root->right); 
}



BinaryTreeNode<int>* takeinput(){   //recursive

    int rootData;
    cout<<"Enter Data"<<endl;
    cin>>rootData;

    if(rootData==-1){
        return NULL;    //indicating no subtrees present!
    }

    //getting the subtrees and root node ready
    BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);
    BinaryTreeNode<int>* leftChild=takeinput();
    BinaryTreeNode<int>* rightChild=takeinput();

    //connecting the subtrees
    root->left=leftChild;
    root->right=rightChild;

    //returning the root
    return root;
}

BinaryTreeNode<int> *takeinputLevelWise(){
    int rootData;
    cout<<"Enter Root Data"<<endl;
    cin>>rootData;
    if(rootData==-1){   //-1 still a indicator that it has no children.
        return NULL;
    }

    BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);

    queue<BinaryTreeNode<int>*> pendingNodes;   //queue for pending nodes
    pendingNodes.push(root);    //pushing first root as pending nodes.

    while(pendingNodes.size()!=0){  //until and unless the queue is empty , we should traverse implying there are nodes left to explore.
        
        BinaryTreeNode<int>* front=pendingNodes.front();    //keeping the front before poping
        pendingNodes.pop(); //poping the front element.

        //left child
        cout<<"Enter left child of "<<front->data<<endl;
        int leftChildData;
        cin>>leftChildData;
        if(leftChildData!=-1){
            BinaryTreeNode<int>* child=new BinaryTreeNode<int>(leftChildData);
            front->left=child;
            pendingNodes.push(child);   //pushing into the queue(left child)
        }

        //right child
        cout<<"Enter right child of "<<front->data<<endl;
        int rightChildData;
        cin>>rightChildData;
        if(rightChildData!=-1){
            BinaryTreeNode<int> *child=new BinaryTreeNode<int>(rightChildData);
            front->right=child;
            pendingNodes.push(child);   //pushing into the queue(right child)
        } 

    }
    return root;    //returning the root
}

void PrintLevelWise(BinaryTreeNode<int>* root){
    
    queue<BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);

    while(pendingNodes.size()!=0){
        BinaryTreeNode<int> *front=pendingNodes.front();
        pendingNodes.pop();

        cout<<front->data<<" : ";

        //Left
        if(front->left!=NULL){
            cout<<"L->";
            cout<<front->left->data;
            pendingNodes.push(front->left);
        }

        //Right
        if(front->right!=NULL){
            cout<<",R->";
            cout<<front->right->data;
            pendingNodes.push(front->right);
        }

        cout<<endl;
    }
}

int NumNodes(BinaryTreeNode<int>* root){
    if(root==NULL){
        return 0;
    }

    return 1 + NumNodes(root->left) + NumNodes(root->right);
}

bool present(BinaryTreeNode<int>* root,int data){
    if(root==NULL){     //base case
        return false;
    }

    if(root->data==data){   //checking root->data
        return true;
    }

    bool left_child=present(root->left,data);       //checking left subtree
    if(left_child==true){
        return true;
    }

    bool right_child=present(root->right,data);     //checking right subtree
    if(right_child==true){
        return true;
    }

    return false;       //if all these cases failed , then return false
}


//height
int height(BinaryTreeNode<int>* root){
    if(root==NULL){
        return 0;
    }

    int left_height=height(root->left);
    int right_height=height(root->right);

    return 1 + max(left_height,right_height);

}

void inOrder(BinaryTreeNode<int>* root){
    if(root==NULL){
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}

void PreOrder(BinaryTreeNode<int>* root){
    if(root==NULL){
        return ;
    }
    cout<<root->data<<endl;
    PreOrder(root->left);
    PreOrder(root->right);
}

void PostOrder(BinaryTreeNode<int>* root){
    if(root==NULL){
        return;
    }

    PostOrder(root->left);
    PostOrder(root->right);
    cout<<root->data<<" ";
}

//create tree using inorder and preorder
BinaryTreeNode<int>* buildTreeHelper_In_Pre(int* in,int* pre,int inS,int inE,int preS,int preE){
    if(inS>inE){    //empty array
        return NULL;
    }

    int rootData=pre[preS];

    int rootIndex=-1;
    for(int i=inS;i<=inE;i++){
        if(in[i]==rootData){
            rootIndex=i;
            break;
        }
    }

    int lInS=inS;
    int lInE=rootIndex-1; 
    int lPreS=preS+1;
    int lPreE=lInE-lInS+lPreS;


    int rPreS=lPreE+1;
    int rPreE=preE;
    int rInS=rootIndex+1;
    int rInE=inE;

    BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);    //creating the root
    root->left=buildTreeHelper_In_Pre(in,pre,lInS,lInE,lPreS,lPreE);
    root->right=buildTreeHelper_In_Pre(in,pre,rInS,rInE,rPreS,rPreE);

    return root;
}

BinaryTreeNode<int>* buildTreeHelper_In_Pos(int* in,int* pos,int inS,int inE,int posS,int posE){
    if(inS>inE){
        return NULL;
    }

    int rootData=pos[posE];
    // cout<<rootData<<endl;

    int rootIndex=-1;
    for(int i=inS;i<=inE;i++){
        if(in[i]==rootData){
            rootIndex=i;
            break;
        }
    }

    int lInS=inS;
    int lInE=rootIndex-1;
    int lposS=posS;
    int lposE=lInS-lInE+lposS;

    int rposS=lposE+1;
    int rposE=posE-1;
    int rInS=rootIndex+1;
    int rInE=inE;

    BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);
    root->left=buildTreeHelper_In_Pos(in,pos,lInS,lInE,lposS,lposE);
    root->right=buildTreeHelper_In_Pos(in,pos,rInS,rInE,rposS,rposE);

    return root;

}

BinaryTreeNode<int>* buildTree_In_pre(int* in,int* pre,int size){
    return buildTreeHelper_In_Pre(in,pre,0,size-1,0,size-1);
    // return buildTreeHelper_In_Pos(in,pre,0,size-1,0,size-1);
}

BinaryTreeNode<int>* buildTree_In_pos(int* in,int* pos,int size){
    return buildTreeHelper_In_Pos(in,pos,0,size-1,0,size-1);
    // return buildTreeHelper_In_Pos(in,pre,0,size-1,0,size-1);
}

int diameter(BinaryTreeNode<int>* root){
    if(root==NULL){
        return 0;
    }

    int option1=height(root->left)+height(root->right); //twice call on same node (time complexity: n*h or n^2)
    int option2=diameter(root->left);
    int option3=diameter(root->right);

    return max(option1,max(option2,option3));  
}


pair<int,int> heightDiameter(BinaryTreeNode<int>* root){
    if(root==NULL){
        pair<int,int> p;
        p.first=0;
        p.second=0; 
        return p;
    }
    pair<int,int> leftAns=heightDiameter(root->left);
    pair<int,int> rightAns=heightDiameter(root->right);

    int ld=leftAns.second;  //second=diameter from the pair class
    int lh=leftAns.first;   //first=height

    int rd=rightAns.second;
    int rh=rightAns.first;

    int height=1+max(lh,rh);
    int diameter=max(lh+rh,max(ld,rd));

    pair<int,int> p;
    p.first=height;
    p.second=diameter;
    return p;
}


pair<int,int> max_min(BinaryTreeNode<int>* root){       //first-max,second-min
    if(root==NULL){
        pair<int,int> p;
        p.first=INT_MIN;
        p.second=INT_MAX;
        return p;
    }

    pair<int,int> ans;

    pair<int,int> leftAns=max_min(root->left);
    pair<int,int> rightAns=max_min(root->right);

    ans.first=max(root->data,max(leftAns.first,rightAns.first));
    ans.second=min(root->data,min(leftAns.second,rightAns.second));
    return ans;

}


//first-bool(isBalanced)
//second-int(height)

pair<bool,int> isBalanced(BinaryTreeNode<int>* root){

    if(root==NULL){
        pair<bool,int> p;
        p.first=true;
        p.second=0;
        return p;
    }

    pair<bool,int> leftAns=isBalanced(root->left);
    pair<bool,int> rightAns=isBalanced(root->right);

    int height_root=abs(leftAns.second-rightAns.second);

    bool root_ans=leftAns.first && rightAns.first;

    pair<bool,int> ans;

    if(height_root<=1 && root_ans==true){
        ans.first=true;
        ans.second=1+max(leftAns.second,rightAns.second);
    }
    else{
        ans.first=false;
        ans.second=1+max(leftAns.second,rightAns.second);
    }

    return ans;
}

void levelOrderPrint(BinaryTreeNode<int>* root){
    if(root==NULL){
        return;
    }

    queue<BinaryTreeNode<int>*> pending_nodes;

    // BinaryTreeNode<int>* ter=new BinaryTreeNode<int>(-1);   //Just a indication of end line in place of NULL
    // cout<<ter->data<<endl;
    
    pending_nodes.push(root);
    pending_nodes.push(NULL/*ter*/);   //still working for NULL

    while(pending_nodes.empty()!=true){

    BinaryTreeNode<int>* cur=pending_nodes.front();

        if(pending_nodes.size()==1 && cur==NULL/*ter*/){
            break;
        }

        pending_nodes.pop();
        

        if(cur==/*ter*/NULL){
            cout<<endl;
            pending_nodes.push(NULL);
            continue;   //if cur is ter then we don't need to check for left or right.
        }else{
            cout<<cur->data<<" ";
        }
        if(cur->left!=NULL){
            pending_nodes.push(cur->left);
        }
        if(cur->right!=NULL){
            pending_nodes.push(cur->right);
        }
    }
    
    
}


int main(){
    /*

    //creating nodes
    BinaryTreeNode<int>* root=new BinaryTreeNode<int>(1);
    BinaryTreeNode<int>* node1=new BinaryTreeNode<int>(2);
    BinaryTreeNode<int>* node2=new BinaryTreeNode<int>(3);

    //connecting nodes
    root->left=node1;
    root->right=node2;

    */

   //Tree
   //1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
// BinaryTreeNode<int>* root=takeinputLevelWise();

/*
    PrintLevelWise(root);
    cout<<NumNodes(root)<<endl;
    cout<<present(root,7)<<endl;
    cout<<height(root)<<endl;
    inOrder(root);
    */

/*
   int in[]={4,2,5,1,8,6,9,3,7};
   int pre[]={1,2,4,5,3,6,8,9,7};
   int pos[]={4,5,2,8,9,6,7,3,1};

    // BinaryTreeNode<int>* root=buildTree_In_pre(in,pre,9);
    BinaryTreeNode<int>* root=buildTree_In_pos(in,pos,9);
*/

    BinaryTreeNode<int>* root=takeinputLevelWise();
    PrintLevelWise(root);

    /*
    pair<int,int> p=heightDiameter(root);
    cout<<"Height:"<<p.second<<endl;
    cout<<"Diameter:"<<p.first<<endl;
    */

/*
   pair<int,int> ans=max_min(root);
   cout<<"max-> "<<ans.first<<endl;
   cout<<"min-> "<<ans.second<<endl;
*/

/*
pair<bool,int> ans=isBalanced(root);
cout<<ans.first<<endl;
cout<<ans.second<<endl;
*/

levelOrderPrint(root);
// BinaryTreeNode<int>* ter=new BinaryTreeNode<int>(-1);
// cout<<ter->data<<endl;
 delete root;
}