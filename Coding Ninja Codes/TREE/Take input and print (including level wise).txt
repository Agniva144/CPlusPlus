#include<iostream>
#include<queue>
#include "Tree_Node.h"
using namespace std;


TreeNode<int>* takeinputLevelWise(){
    int rootData;
    cout<<"Enter the root data "<<endl;
    cin>>rootData;

    TreeNode<int>* root=new TreeNode<int>(rootData);    //creating the root node.

    queue<TreeNode<int>*> pendingNodes;  //creating a queue for pending nodes.
    pendingNodes.push(root); //pushing the root into the queue.

    while(pendingNodes.size()!=0){       //until and unless the queue is getting empty.
        TreeNode<int>* front=pendingNodes.front();       //get the front element from the queue.
        pendingNodes.pop(); //poping the front node
        cout<<"Enter num of children of "<<front->val<<endl;    //child of front node
        int numChild;
        cin>>numChild;  //take input of child of frontNode
        for(int i=0;i<numChild;i++){    //loop to take the children of a node and connecting also pushing into the queue
            int childData;
            cout<<"Enter "<<i<<"th of child of "<<front->val<<endl;
            cin>>childData;
            TreeNode<int>* child=new TreeNode<int>(childData);  //creating the node for the child
            front->children.push_back(child);//connecting the child with the parent.
            pendingNodes.push(child);    //pushing the node into the queue
        }
    }
    return root;    //returning the parent node.
}

TreeNode<int>* takeinput(){
     int rootData;
     cout<<"Enter Data-> "<<endl;
     cin>>rootData;

    TreeNode<int> *root=new TreeNode<int>(rootData);

    int n;      //number of children of root 
    cout<<"Enter num of number of children "<<rootData<<endl;
    cin>>n;

    for(int i=0;i<n;i++){
        TreeNode<int> *child=takeinput();   //CREATING CHILDREN
        root->children.push_back(child);    //conncecting to the parent.
    }

    return root;
}

void printTree_worse(TreeNode<int>* root){        //will just print , not give proper information
    cout<<root->val<<endl;
    for(int i=0;i<root->children.size();i++){
        printTree_worse(root->children[i]);
    }
}

void printLevelWise(TreeNode<int>* root){

    queue<TreeNode<int>*> pendingNodes; //creating the queue.
    pendingNodes.push(root); 

    while(pendingNodes.size()!=0){

        TreeNode<int>* front=pendingNodes.front();  //saving the front node into the front node.
        pendingNodes.pop();

        cout<<front->val<<": ";
        for(int i=0;i<front->children.size();i++){
            cout<<front->children[i]->val<<", ";    //printing out the value
            pendingNodes.push(front->children[i]);  //pushing the node into the queue
        }
        cout<<endl;
    }
}

void printTree(TreeNode<int>* root){    //generic tree doesn't require base case;

    if(root==NULL){     //it's not a base case it's just a edge case.
        return ;
    }

    //printing the children!
    cout<<root->val<<" :";
    for(int i=0;i<root->children.size();i++){
        cout<<root->children[i]->val<<" ,";
    }cout<<endl;

    //calling recursion to the children node
    for(int i=0;i<root->children.size();i++){
        printTree(root->children[i]);
    }
}

int main(){
    /*
    TreeNode<int> *root=new TreeNode<int>(1);
    TreeNode<int> *node1=new TreeNode<int>(2);
    TreeNode<int> *node2=new TreeNode<int>(3);

    root->children.push_back(node1);
    root->children.push_back(node2);
    */
   TreeNode<int>* root=takeinputLevelWise();
    printLevelWise(root);
    printTree(root);
}